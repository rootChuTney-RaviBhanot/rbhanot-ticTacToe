/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'root' at '8/7/16 9:03 PM' with Gradle 2.14.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'distribution'
//apply from: 'gradle/gretty.plugin'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'org.akhikhl.gretty'

sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'org.akhikhl.gretty:gretty:+'
    }
}

gretty {
    port = 8080
    servletContainer = 'jetty9'
    contextPath = "/"
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile "org.apache.commons:commons-lang3:3.4"
    compile 'com.sparkjava:spark-core:2.5'
    compile "org.akhikhl.gretty:gretty:1.4.0"
    compile "com.google.code.gson:gson:2.5"
    compile "org.mockito:mockito-all:1.10.19"
    compile group: 'com.ullink.slack', name: 'simpleslackapi', version: '0.5.1'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

test {
    testLogging {
        events 'started', 'passed'
    }
}

task stage {
    dependsOn build
}

sourceSets {
    tests {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('test')
        }
    }
}

distributions {
    main {
        baseName = 'rbhanot-ticTacToe'
        contents {
            from war.outputs.files
        }
    }
}

tasks.withType(Tar) {
    compression = Compression.GZIP
}

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'rbhanot-ticTacToe.jar',
                'Implementation-Version': 1.0,
                'Main-Class': 'com.tictactoe.application.TicTacToeApplication'
    }
    baseName = project.name + '-all'
    doFirst {
        from (configurations.runtime.resolve().collect { it.isDirectory() ? it : zipTree(it) }) {
            exclude 'META-INF/MANIFEST.MF'
            exclude 'META-INF/*.SF'
            exclude 'META-INF/*.DSA'
            exclude 'META-INF/*.RSA'
        }
    }
    with jar
}